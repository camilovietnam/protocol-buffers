// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.19.4
// source: votingpb/voting.proto

package votingpb

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type VoteRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Option uint32 `protobuf:"varint,1,opt,name=option,proto3" json:"option,omitempty"`
}

func (x *VoteRequest) Reset() {
	*x = VoteRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_votingpb_voting_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteRequest) ProtoMessage() {}

func (x *VoteRequest) ProtoReflect() protoreflect.Message {
	mi := &file_votingpb_voting_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteRequest.ProtoReflect.Descriptor instead.
func (*VoteRequest) Descriptor() ([]byte, []int) {
	return file_votingpb_voting_proto_rawDescGZIP(), []int{0}
}

func (x *VoteRequest) GetOption() uint32 {
	if x != nil {
		return x.Option
	}
	return 0
}

type VoteResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Winner uint32 `protobuf:"varint,1,opt,name=winner,proto3" json:"winner,omitempty"`
}

func (x *VoteResponse) Reset() {
	*x = VoteResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_votingpb_voting_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VoteResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VoteResponse) ProtoMessage() {}

func (x *VoteResponse) ProtoReflect() protoreflect.Message {
	mi := &file_votingpb_voting_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VoteResponse.ProtoReflect.Descriptor instead.
func (*VoteResponse) Descriptor() ([]byte, []int) {
	return file_votingpb_voting_proto_rawDescGZIP(), []int{1}
}

func (x *VoteResponse) GetWinner() uint32 {
	if x != nil {
		return x.Winner
	}
	return 0
}

var File_votingpb_voting_proto protoreflect.FileDescriptor

var file_votingpb_voting_proto_rawDesc = []byte{
	0x0a, 0x15, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2f, 0x76, 0x6f, 0x74, 0x69, 0x6e,
	0x67, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x08, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x70,
	0x62, 0x22, 0x25, 0x0a, 0x0b, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x16, 0x0a, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x06, 0x6f, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x22, 0x26, 0x0a, 0x0c, 0x56, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x77, 0x69, 0x6e, 0x6e,
	0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x06, 0x77, 0x69, 0x6e, 0x6e, 0x65, 0x72,
	0x32, 0x4a, 0x0a, 0x0d, 0x56, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x12, 0x39, 0x0a, 0x04, 0x56, 0x6f, 0x74, 0x65, 0x12, 0x15, 0x2e, 0x76, 0x6f, 0x74, 0x69,
	0x6e, 0x67, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x74, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x16, 0x2e, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x2e, 0x56, 0x6f, 0x74, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01, 0x42, 0x0b, 0x5a, 0x09,
	0x2f, 0x76, 0x6f, 0x74, 0x69, 0x6e, 0x67, 0x70, 0x62, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x33,
}

var (
	file_votingpb_voting_proto_rawDescOnce sync.Once
	file_votingpb_voting_proto_rawDescData = file_votingpb_voting_proto_rawDesc
)

func file_votingpb_voting_proto_rawDescGZIP() []byte {
	file_votingpb_voting_proto_rawDescOnce.Do(func() {
		file_votingpb_voting_proto_rawDescData = protoimpl.X.CompressGZIP(file_votingpb_voting_proto_rawDescData)
	})
	return file_votingpb_voting_proto_rawDescData
}

var file_votingpb_voting_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_votingpb_voting_proto_goTypes = []interface{}{
	(*VoteRequest)(nil),  // 0: votingpb.VoteRequest
	(*VoteResponse)(nil), // 1: votingpb.VoteResponse
}
var file_votingpb_voting_proto_depIdxs = []int32{
	0, // 0: votingpb.VotingService.Vote:input_type -> votingpb.VoteRequest
	1, // 1: votingpb.VotingService.Vote:output_type -> votingpb.VoteResponse
	1, // [1:2] is the sub-list for method output_type
	0, // [0:1] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_votingpb_voting_proto_init() }
func file_votingpb_voting_proto_init() {
	if File_votingpb_voting_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_votingpb_voting_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_votingpb_voting_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VoteResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_votingpb_voting_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_votingpb_voting_proto_goTypes,
		DependencyIndexes: file_votingpb_voting_proto_depIdxs,
		MessageInfos:      file_votingpb_voting_proto_msgTypes,
	}.Build()
	File_votingpb_voting_proto = out.File
	file_votingpb_voting_proto_rawDesc = nil
	file_votingpb_voting_proto_goTypes = nil
	file_votingpb_voting_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// VotingServiceClient is the client API for VotingService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type VotingServiceClient interface {
	Vote(ctx context.Context, opts ...grpc.CallOption) (VotingService_VoteClient, error)
}

type votingServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVotingServiceClient(cc grpc.ClientConnInterface) VotingServiceClient {
	return &votingServiceClient{cc}
}

func (c *votingServiceClient) Vote(ctx context.Context, opts ...grpc.CallOption) (VotingService_VoteClient, error) {
	stream, err := c.cc.NewStream(ctx, &_VotingService_serviceDesc.Streams[0], "/votingpb.VotingService/Vote", opts...)
	if err != nil {
		return nil, err
	}
	x := &votingServiceVoteClient{stream}
	return x, nil
}

type VotingService_VoteClient interface {
	Send(*VoteRequest) error
	CloseAndRecv() (*VoteResponse, error)
	grpc.ClientStream
}

type votingServiceVoteClient struct {
	grpc.ClientStream
}

func (x *votingServiceVoteClient) Send(m *VoteRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *votingServiceVoteClient) CloseAndRecv() (*VoteResponse, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(VoteResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VotingServiceServer is the server API for VotingService service.
type VotingServiceServer interface {
	Vote(VotingService_VoteServer) error
}

// UnimplementedVotingServiceServer can be embedded to have forward compatible implementations.
type UnimplementedVotingServiceServer struct {
}

func (*UnimplementedVotingServiceServer) Vote(VotingService_VoteServer) error {
	return status.Errorf(codes.Unimplemented, "method Vote not implemented")
}

func RegisterVotingServiceServer(s *grpc.Server, srv VotingServiceServer) {
	s.RegisterService(&_VotingService_serviceDesc, srv)
}

func _VotingService_Vote_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VotingServiceServer).Vote(&votingServiceVoteServer{stream})
}

type VotingService_VoteServer interface {
	SendAndClose(*VoteResponse) error
	Recv() (*VoteRequest, error)
	grpc.ServerStream
}

type votingServiceVoteServer struct {
	grpc.ServerStream
}

func (x *votingServiceVoteServer) SendAndClose(m *VoteResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *votingServiceVoteServer) Recv() (*VoteRequest, error) {
	m := new(VoteRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _VotingService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "votingpb.VotingService",
	HandlerType: (*VotingServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Vote",
			Handler:       _VotingService_Vote_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "votingpb/voting.proto",
}
